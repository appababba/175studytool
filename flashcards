<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bio/Algo Flashcards</title>
  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white flex items-center justify-center min-h-screen p-4">
  <div class="w-full max-w-xl">
    <!-- Flashcard -->
    <div id="card" class="rounded-2xl shadow-xl p-8 bg-gray-800 text-center text-xl cursor-pointer select-none transition-transform min-h-[160px] flex items-center justify-center">
      <!-- Content is injected by JavaScript -->
    </div>

    <!-- Controls -->
    <div class="flex justify-between mt-6">
      <button id="prev" class="px-4 py-2 bg-gray-700 rounded-lg hover:bg-gray-600">Prev</button>
      <button id="flip" class="px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-500">Flip</button>
      <button id="next" class="px-4 py-2 bg-gray-700 rounded-lg hover:bg-gray-600">Next</button>
    </div>

    <!-- Progress & Shuffle -->
    <div class="flex justify-between mt-4 text-sm text-gray-400">
      <span id="progress">1 / 1</span>
      <button id="shuffle" class="underline">Shuffle</button>
    </div>
  </div>

  <script>
    // --- Flashcards data (exact copies of your answers) ---
    const flashcards = [
      { q: 'Explain briefly “splicing” in the gene expression.', a: `Splicing is when introns are removed from the pre‑mRNA and the coding regions called exons are joined together.` },
      { q: 'Show the structure of mRNA. Please specify each field with name.', a: `7‑methyl‑G cap → 5′ UTR → Start codon (AUG) → Coding sequence (CDS) → Stop codon (UAA/UAG/UGA) → 3′ UTR → Poly(A) tail` },
      { q: 'Genetic code / write corresponding protein sequence.', a: `Read mRNA in non‑overlapping triplets (codons) and translate each into its amino‑acid to obtain the protein sequence.` },
      { q: 'What is the role of tRNA (transfer RNA), which is a non‑coding RNA?', a: `tRNA helps build proteins by bringing the right amino acids to the ribosome during translation. Each tRNA matches an mRNA codon with its anticodon and carries the right amino acid to add to the growing protein chain.` },

      { q: 'Greedy algorithm (explain briefly).', a: `Builds solution step‑by‑step, always picks the locally optimal choice, hoping for global optimum.` },
      { q: 'Branch and bound algorithm (explain briefly).', a: `Systematically explores a solution tree; uses bounds to prune branches that cannot beat the best solution so far.` },
      { q: 'Dynamic programming algorithm (explain briefly).', a: `Solves overlapping sub‑problems once, stores their values, and combines them to build the optimal global answer.` },
      { q: 'What is called “polynomial time algorithm”? (Big‑O definition)', a: `Its worst‑case running time is O(nᵏ) for some constant k (k independent of n).` },
      { q: 'Show the time complexity of the recursive selection sort and justify.', a: `T(n)=T(n‑1)+O(n) ⇒ T(n)=O(n²); each pass places one smallest element and recurses on n‑1 items.` },

      { q: 'Define the restriction site mapping problem (PDP) in terms of input and output.', a: `Definition: Input: multiset L of all pairwise distances between n restriction sites (and 0, M = maximum). Output: a set X of n site positions on the line (0 ≤ x₁ < … < xₙ = M) whose pairwise differences equal L.` },
      { q: 'Write the brute‑force algorithm for the PDP.', a: `M ← max(L); for every subset S of L with (n‑2) elements: X ← {0, M} ∪ S; if pairwise distances of X equal L, return X.` },
      { q: 'Time complexity of the brute‑force PDP algorithm (justify).', a: `Enumerates C(|L|, n‑2) ≈ O(n!) candidate sets and checks O(n²) distances ⇒ O(n!).` },
      { q: 'Describe the idea of the improved brute‑force PDP algorithm and its time complexity.', a: `Place the largest distance at 0 or M and recurse on the reduced multiset (symmetry). Worst‑case time ≈ O(2ⁿ).` },

      { q: 'Practical PDP: how to set the hypothetical xᵢ.', a: `Choose the largest remaining distance d in L and tentatively place a site at x = d or at x = M − d (two symmetric choices).` },
      { q: 'Practical PDP: how to check whether the hypothetical xᵢ is satisfactory.', a: `Subtract from L all distances between x and already‑chosen sites; if any required distance is missing, reject that placement and backtrack.` },
      { q: 'Time complexity of recursive practical PDP algorithm.', a: `Recursive implementation complexity: In practice O(n²) expected because pruning is heavy; worst‑case recurrence still 2‑branch, so O(2ⁿ).` },

      { q: 'Define the (L,d) motif finding problem.', a: `Find an L‑mer (length‑L pattern) appearing in each of p DNA sequences with ≤ d mismatches (Hamming), maximising some score.` },
      { q: 'Total search space for motif positions (p sequences length k, motif length L).', a: `Total search space: (k − L + 1)ᵖ possible motif position combinations.` },

      { q: 'Write the median‑string objective formula.', a: `Find string s* that minimises Σ₁ᵖ Hamming(s*, tᵢ) over all length‑L substrings tᵢ in each sequence.` },
      { q: 'Relationship between motif finding and median string finding problems.', a: `Motif‑finding ≈ median‑string when the optimal median’s total distance ≤ p·d.` },
      { q: 'Brute‑force median string search algorithm.', a: `best_word ← “A…A”; best_dist ← ∞; for every L‑mer w in 4ᴸ: dist ← Σ₁ᵖ min_{sub in seqᵢ} Hamming(w, sub); if dist < best_dist: (best_word, best_dist) ← (w, dist); return best_word.` },

      { q: 'Branch‑and‑bound median finding: operations at a non‑leaf node.', a: `At a non‑leaf L‑mer‑tree node: call next_Vertex() to extend the partial prefix; compute lower bound with Total_distance(Prefix); if bound ≥ current best, Bypass() the subtree; else continue down.` },
      { q: 'Time complexity of the greedy motif finding approach (justify).', a: `Greedy motif algorithm scans each sequence once per column ⇒ O(p·k) per column, times L columns ⇒ O(p·k·L).` },

      { q: 'Needleman–Wunsch recurrence relation.', a: `V(i,j) = max{ V(i‑1,j‑1) + s(xᵢ, yⱼ), V(i‑1,j) + gap, V(i,j‑1) + gap }` },
      { q: 'Describe the LCS problem via global alignment.', a: `Set match = 1, mismatch = 0, gap = 0; maximising the alignment score under that scheme yields the length of the longest common subsequence.` },

      { q: 'Affine gap penalty model formula and linear gap relation.', a: `Affine: gap(k) = g + e·(k‑1) where g = gap‑open, e = gap‑extend. Linear gap penalty is the affine model with e = 0.` },

      { q: 'Best local alignment for S = ACAA and T = CTCAT (match 2, mis/ins/del -1).', a: `Alignment “CA” with “CA”; score = 4.` }
    ];

    // --- State ---
    let idx = 0;
    let showingAnswer = false;

    // --- Elements ---
    const card = document.getElementById('card');
    const progress = document.getElementById('progress');
    const prevBtn = document.getElementById('prev');
    const nextBtn = document.getElementById('next');
    const flipBtn = document.getElementById('flip');
    const shuffleBtn = document.getElementById('shuffle');

    // --- Functions ---
    function render() {
      progress.textContent = `${idx + 1} / ${flashcards.length}`;
      const text = showingAnswer ? flashcards[idx].a : flashcards[idx].q;
      card.innerHTML = text;
    }

    function flip() {
      showingAnswer = !showingAnswer;
      render();
    }

    function next() {
      if (idx < flashcards.length - 1) {
        idx++;
        showingAnswer = false;
        render();
      }
    }

    function prev() {
      if (idx > 0) {
        idx--;
        showingAnswer = false;
        render();
      }
    }

    function shuffle() {
      for (let i = flashcards.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [flashcards[i], flashcards[j]] = [flashcards[j], flashcards[i]];
      }
      idx = 0;
      showingAnswer = false;
      render();
    }

    // --- Event listeners ---
    card.addEventListener('click', flip);
    flipBtn.addEventListener('click', flip);
    nextBtn.addEventListener('click', next);
    prevBtn.addEventListener('click', prev);
    shuffleBtn.addEventListener('click', shuffle);

    // --- Initial render ---
    render();
  </script>
</body>
</html>
